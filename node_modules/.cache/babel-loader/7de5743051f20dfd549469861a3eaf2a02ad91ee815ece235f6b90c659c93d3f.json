{"ast":null,"code":"var _jsxFileName = \"D:\\\\MERN Stack Project\\\\CouchSurfConnect\\\\client\\\\src\\\\components\\\\addRoom\\\\addLocation\\\\Geocoder.js\",\n  _s = $RefreshSig$();\n// import MapBoxGeocoder from '@mapbox/mapbox-gl-geocoder';\n// import { useControl } from 'react-map-gl';\n// import { useValue } from '../../../context/ContextProvider';\n// import '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\n\n// const Geocoder = () => {\n//   const { dispatch } = useValue();\n//   const ctrl = new MapBoxGeocoder({\n//     accessToken: process.env.REACT_APP_MAP_TOKEN,\n//     marker: false,\n//     collapsed: true,\n//   });\n//   useControl(() => ctrl);\n//   ctrl.on('result', (e) => {\n//     const coords = e.result.geometry.coordinates;\n//     dispatch({\n//       type: 'UPDATE_LOCATION',\n//       payload: { lng: coords[0], lat: coords[1] },\n//     });\n//   });\n//   return null;\n// };\n\n// export default Geocoder;\nimport React, { useEffect, useRef } from 'react';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Geocoder = ({\n  mapRef\n}) => {\n  _s();\n  const geocoderContainerRef = useRef(null);\n  useEffect(() => {\n    if (mapRef.current && geocoderContainerRef.current) {\n      const geocoder = new MapboxGeocoder({\n        accessToken: mapboxgl.accessToken,\n        mapboxgl: mapboxgl\n      });\n      geocoder.on('result', e => {\n        const {\n          result\n        } = e;\n        mapRef.current.flyTo({\n          center: result.geometry.coordinates\n        });\n      });\n      geocoder.addTo(geocoderContainerRef.current);\n    }\n  }, [mapRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: geocoderContainerRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 10\n  }, this);\n};\n_s(Geocoder, \"MFH7XEl+KyO5Byf9uOxaJiuuZZ8=\");\n_c = Geocoder;\nexport default Geocoder;\nvar _c;\n$RefreshReg$(_c, \"Geocoder\");","map":{"version":3,"names":["React","useEffect","useRef","MapboxGeocoder","mapboxgl","jsxDEV","_jsxDEV","Geocoder","mapRef","_s","geocoderContainerRef","current","geocoder","accessToken","on","e","result","flyTo","center","geometry","coordinates","addTo","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/MERN Stack Project/CouchSurfConnect/client/src/components/addRoom/addLocation/Geocoder.js"],"sourcesContent":["// import MapBoxGeocoder from '@mapbox/mapbox-gl-geocoder';\r\n// import { useControl } from 'react-map-gl';\r\n// import { useValue } from '../../../context/ContextProvider';\r\n// import '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\r\n\r\n// const Geocoder = () => {\r\n//   const { dispatch } = useValue();\r\n//   const ctrl = new MapBoxGeocoder({\r\n//     accessToken: process.env.REACT_APP_MAP_TOKEN,\r\n//     marker: false,\r\n//     collapsed: true,\r\n//   });\r\n//   useControl(() => ctrl);\r\n//   ctrl.on('result', (e) => {\r\n//     const coords = e.result.geometry.coordinates;\r\n//     dispatch({\r\n//       type: 'UPDATE_LOCATION',\r\n//       payload: { lng: coords[0], lat: coords[1] },\r\n//     });\r\n//   });\r\n//   return null;\r\n// };\r\n\r\n// export default Geocoder;\r\nimport React, { useEffect, useRef } from 'react';\r\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\r\n\r\nconst Geocoder = ({ mapRef }) => {\r\n  const geocoderContainerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (mapRef.current && geocoderContainerRef.current) {\r\n      const geocoder = new MapboxGeocoder({\r\n        accessToken: mapboxgl.accessToken,\r\n        mapboxgl: mapboxgl\r\n      });\r\n\r\n      geocoder.on('result', (e) => {\r\n        const { result } = e;\r\n        mapRef.current.flyTo({\r\n          center: result.geometry.coordinates\r\n        });\r\n      });\r\n\r\n      geocoder.addTo(geocoderContainerRef.current);\r\n    }\r\n  }, [mapRef]);\r\n\r\n  return <div ref={geocoderContainerRef} />;\r\n};\r\n\r\nexport default Geocoder;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAOC,cAAc,MAAM,4BAA4B;AACvD,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAO,8BAA8B;AACrC,OAAO,wDAAwD;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC/B,MAAMC,oBAAoB,GAAGR,MAAM,CAAC,IAAI,CAAC;EAEzCD,SAAS,CAAC,MAAM;IACd,IAAIO,MAAM,CAACG,OAAO,IAAID,oBAAoB,CAACC,OAAO,EAAE;MAClD,MAAMC,QAAQ,GAAG,IAAIT,cAAc,CAAC;QAClCU,WAAW,EAAET,QAAQ,CAACS,WAAW;QACjCT,QAAQ,EAAEA;MACZ,CAAC,CAAC;MAEFQ,QAAQ,CAACE,EAAE,CAAC,QAAQ,EAAGC,CAAC,IAAK;QAC3B,MAAM;UAAEC;QAAO,CAAC,GAAGD,CAAC;QACpBP,MAAM,CAACG,OAAO,CAACM,KAAK,CAAC;UACnBC,MAAM,EAAEF,MAAM,CAACG,QAAQ,CAACC;QAC1B,CAAC,CAAC;MACJ,CAAC,CAAC;MAEFR,QAAQ,CAACS,KAAK,CAACX,oBAAoB,CAACC,OAAO,CAAC;IAC9C;EACF,CAAC,EAAE,CAACH,MAAM,CAAC,CAAC;EAEZ,oBAAOF,OAAA;IAAKgB,GAAG,EAAEZ;EAAqB;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3C,CAAC;AAACjB,EAAA,CAtBIF,QAAQ;AAAAoB,EAAA,GAARpB,QAAQ;AAwBd,eAAeA,QAAQ;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}