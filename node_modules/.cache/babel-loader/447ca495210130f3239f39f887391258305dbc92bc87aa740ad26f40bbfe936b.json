{"ast":null,"code":"var _jsxFileName = \"D:\\\\MERN Stack Project\\\\CouchSurfConnect\\\\client\\\\src\\\\components\\\\addRoom\\\\addLocation\\\\AddLocation.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport ReactMapGL, { GeolocateControl, Marker, NavigationControl } from 'react-map-gl';\nimport { Box } from '@mui/material';\nimport { useValue } from '../../../context/ContextProvider';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddLocation = () => {\n  _s();\n  const {\n    state: {\n      location: {\n        lng,\n        lat\n      }\n    },\n    dispatch\n  } = useValue();\n  const mapRef = useRef();\n  // useEffect(()=>{\n  //   navigator.geolocation.getCurrentPosition((position)=>{\n  //     dispatch({type:'UPDATE_LOCATION',payload:{lng:position.coords.longitude,lat:position.coords.latitude}})\n  //   })\n  // }\n  // ,[dispatch])\n  useEffect(() => {\n    if (!lng && !lat) {\n      fetch('https://ipapi.co/json').then(response => response.json()).then(data => {\n        mapRef.current.flyTo({\n          center: [data.longitude, data.latitude]\n        });\n        dispatch({\n          type: 'UPDATE_LOCATION',\n          payload: {\n            lng: data.longitude,\n            lat: data.latitude\n          }\n        });\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: 400,\n      position: 'relative'\n    },\n    children: /*#__PURE__*/_jsxDEV(ReactMapGL, {\n      mapboxAccessToken: process.env.REACT_APP_MAPBOX_TOKEN,\n      initialViewState: {\n        longitude: lng,\n        latitude: lat,\n        zoom: 8\n      },\n      mapStyle: \"mapbox://styles/mapbox/streets-v11\",\n      children: [/*#__PURE__*/_jsxDEV(Marker, {\n        latitude: lat,\n        longitude: lng,\n        draggable: true,\n        onDragEnd: e => dispatch({\n          type: 'UPDATE_LOCATION',\n          payload: {\n            lng: e.lngLat.lng,\n            lat: e.lngLat.lat\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(NavigationControl, {\n        position: \"bottom-right\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GeolocateControl, {\n        position: \"top-left\",\n        trackUserLocation: true,\n        onGeolocate: e => dispatch({\n          type: 'UPDATE_LOCATION',\n          payload: {\n            lng: e.coords.longitude,\n            lat: e.coords.latitude\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(AddLocation, \"93Y+Nr/YjG64NeVeGXmVluFJMJ0=\", false, function () {\n  return [useValue];\n});\n_c = AddLocation;\nexport default AddLocation;\n// // import { Box } from '@mui/material';\n// // import ReactMapGL, {\n// //   GeolocateControl,\n// //   Marker,\n// //   NavigationControl,\n// // } from 'react-map-gl';\n// // import { useValue } from '../../../context/ContextProvider';\n// // import 'mapbox-gl/dist/mapbox-gl.css';\n// // import { useEffect, useRef } from 'react';\n// // import Geocoder from './Geocoder';\n\n// // const AddLocation = () => {\n// //   const {\n// //     state: {\n// //       location: { lng, lat },\n// //     },\n// //     dispatch,\n// //   } = useValue();\n// //   const mapRef = useRef();\n\n// //   useEffect(() => {\n// //     if (!lng && !lat) {\n// //       fetch('https://ipapi.co/json')\n// //         .then((response) => {\n// //           return response.json();\n// //         })\n// //         .then((data) => {\n// //           mapRef.current.flyTo({\n// //             center: [data.longitude, data.latitude],\n// //           });\n// //           dispatch({\n// //             type: 'UPDATE_LOCATION',\n// //             payload: { lng: data.longitude, lat: data.latitude },\n// //           });\n// //         });\n// //     }\n// //   }, []);\n// //   return (\n// //     <Box\n// //       sx={{\n// //         height: 400,\n// //         position: 'relative',\n// //       }}\n// //     >\n// //       <ReactMapGL\n// //         ref={mapRef}\n// //         mapboxAccessToken='pk.eyJ1Ijoic2FtYXJ0aDIxMSIsImEiOiJjbHo0bHd3OTcyYmM4MmpwdnpjNWJ5d2V0In0.BY16xp_jFGDvcHDcE_Ub6A'\n// //         initialViewState={{\n// //           longitude: lng,\n// //           latitude: lat,\n// //           zoom: 8,\n// //         }}\n// //         mapStyle=\"mapbox://styles/mapbox/streets-v11\"\n// //       >\n// //         <Marker\n// //           latitude={lat}\n// //           longitude={lng}\n// //           draggable\n// //           onDragEnd={(e) =>\n// //             dispatch({\n// //               type: 'UPDATE_LOCATION',\n// //               payload: { lng: e.lngLat.lng, lat: e.lngLat.lat },\n// //             })\n// //           }\n// //         />\n// //         <NavigationControl position=\"bottom-right\" />\n// //         <GeolocateControl\n// //           position=\"top-left\"\n// //           trackUserLocation\n// //           onGeolocate={(e) =>\n// //             dispatch({\n// //               type: 'UPDATE_LOCATION',\n// //               payload: { lng: e.coords.longitude, lat: e.coords.latitude },\n// //             })\n// //           }\n// //         />\n// //         <Geocoder />\n// //       </ReactMapGL>\n// //     </Box>\n// //   );\n// // };\n\n// // export default AddLocation;\n// import { Box } from '@mui/material';\n// import {\n//   GeolocateControl,\n//   Marker,\n//   NavigationControl,\n// } from 'react-map-gl';\n// import ReactMapGL from 'react-map-gl';\n// import { useValue } from '../../../context/ContextProvider';\n// import 'mapbox-gl/dist/mapbox-gl.css';\n// import { useEffect, useRef } from 'react';\n// import Geocoder from './Geocoder';\n\n// const AddLocation = () => {\n//   const MAP_TOKEN='pk.eyJ1Ijoic2FtYXJ0aDIxMSIsImEiOiJjbHo0cGo1aWwwbGxpMmpxMWVoOTF6NGh3In0.5WY-D1SCAOcqL6xaJA9w0g';\n//   const {\n//     state: {\n//       location: { lng, lat },\n//     },\n//     dispatch,\n//   } = useValue();\n//   const mapRef = useRef();\n\n//   useEffect(() => {\n//     if (!lng && !lat) {\n//       fetch('https://ipapi.co/json')\n//         .then((response) => response.json())\n//         .then((data) => {\n//           mapRef.current.flyTo({\n//             center: [data.longitude, data.latitude],\n//           });\n//           dispatch({\n//             type: 'UPDATE_LOCATION',\n//             payload: { lng: data.longitude, lat: data.latitude },\n//           });\n//         });\n//     }\n//   }, [lng, lat, dispatch]);\n\n//   return (\n//     <Box\n//       sx={{\n//         height: 400,\n//         position: 'relative',\n//       }}\n//     >\n//       <ReactMapGL\n//         ref={mapRef}\n//         mapboxAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n//         initialViewState={{\n//           longitude: lng,\n//           latitude: lat,\n//           zoom: 8,\n//         }}\n//         mapStyle=\"mapbox://styles/mapbox/streets-v12\"\n//       >\n//         <Marker\n//           latitude={lat}\n//           longitude={lng}\n//           draggable\n//           onDragEnd={(e) =>\n//             dispatch({\n//               type: 'UPDATE_LOCATION',\n//               payload: { lng: e.lngLat.lng, lat: e.lngLat.lat },\n//             })\n//           }\n//         />\n//         {/* <GeolocateControl\n//           position=\"top-left\"\n//           trackUserLocation\n//           onGeolocate={(e) =>\n//             dispatch({\n//               type: 'UPDATE_LOCATION',\n//               payload: { lng: e.coords.longitude, lat: e.coords.latitude },\n//             })\n//           } */}\n//         {/* /> */}\n//         <Geocoder mapRef={mapRef} />\n//       </ReactMapGL>\n//     </Box>\n//   );\n// };\n\n// export default AddLocation;\nvar _c;\n$RefreshReg$(_c, \"AddLocation\");","map":{"version":3,"names":["React","useEffect","useRef","ReactMapGL","GeolocateControl","Marker","NavigationControl","Box","useValue","jsxDEV","_jsxDEV","AddLocation","_s","state","location","lng","lat","dispatch","mapRef","fetch","then","response","json","data","current","flyTo","center","longitude","latitude","type","payload","sx","height","position","children","mapboxAccessToken","process","env","REACT_APP_MAPBOX_TOKEN","initialViewState","zoom","mapStyle","draggable","onDragEnd","e","lngLat","fileName","_jsxFileName","lineNumber","columnNumber","trackUserLocation","onGeolocate","coords","_c","$RefreshReg$"],"sources":["D:/MERN Stack Project/CouchSurfConnect/client/src/components/addRoom/addLocation/AddLocation.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react'\r\nimport ReactMapGL,{GeolocateControl, Marker, NavigationControl} from 'react-map-gl';\r\nimport {Box} from '@mui/material';\r\nimport { useValue } from '../../../context/ContextProvider';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\n\r\nconst AddLocation = () => {\r\n  const {state:{location:{lng,lat}},dispatch}=useValue();\r\n  const mapRef=useRef();\r\n  // useEffect(()=>{\r\n  //   navigator.geolocation.getCurrentPosition((position)=>{\r\n  //     dispatch({type:'UPDATE_LOCATION',payload:{lng:position.coords.longitude,lat:position.coords.latitude}})\r\n  //   })\r\n  // }\r\n  // ,[dispatch])\r\n  useEffect(()=>{\r\n    if(!lng && !lat){\r\n      fetch('https://ipapi.co/json')\r\n      .then((response)=>response.json())\r\n      .then((data)=>{\r\n        mapRef.current.flyTo({\r\n          center:[data.longitude,data.latitude]\r\n        });\r\n        dispatch({type:'UPDATE_LOCATION',payload:{lng:data.longitude,lat:data.latitude}})})\r\n    }\r\n  },[])\r\n  return (\r\n    <Box sx={{\r\n      height:400,\r\n      position:'relative',\r\n    }}>\r\n      <ReactMapGL mapboxAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\r\n      initialViewState={{\r\n        longitude:lng,\r\n        latitude:lat,\r\n        zoom:8}}\r\n        mapStyle='mapbox://styles/mapbox/streets-v11'>\r\n          <Marker \r\n          latitude={lat}\r\n          longitude={lng}\r\n          draggable\r\n          onDragEnd={(e)=>dispatch({type:'UPDATE_LOCATION',payload:{lng:e.lngLat.lng,lat:e.lngLat.lat}})}\r\n          />\r\n          <NavigationControl position='bottom-right'/>\r\n          <GeolocateControl\r\n          position='top-left'\r\n          trackUserLocation\r\n          onGeolocate={(e)=>dispatch({type:'UPDATE_LOCATION',payload:{lng:e.coords.longitude,lat:e.coords.latitude}})}\r\n          />\r\n        </ReactMapGL>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default AddLocation\r\n// // import { Box } from '@mui/material';\r\n// // import ReactMapGL, {\r\n// //   GeolocateControl,\r\n// //   Marker,\r\n// //   NavigationControl,\r\n// // } from 'react-map-gl';\r\n// // import { useValue } from '../../../context/ContextProvider';\r\n// // import 'mapbox-gl/dist/mapbox-gl.css';\r\n// // import { useEffect, useRef } from 'react';\r\n// // import Geocoder from './Geocoder';\r\n\r\n// // const AddLocation = () => {\r\n// //   const {\r\n// //     state: {\r\n// //       location: { lng, lat },\r\n// //     },\r\n// //     dispatch,\r\n// //   } = useValue();\r\n// //   const mapRef = useRef();\r\n\r\n// //   useEffect(() => {\r\n// //     if (!lng && !lat) {\r\n// //       fetch('https://ipapi.co/json')\r\n// //         .then((response) => {\r\n// //           return response.json();\r\n// //         })\r\n// //         .then((data) => {\r\n// //           mapRef.current.flyTo({\r\n// //             center: [data.longitude, data.latitude],\r\n// //           });\r\n// //           dispatch({\r\n// //             type: 'UPDATE_LOCATION',\r\n// //             payload: { lng: data.longitude, lat: data.latitude },\r\n// //           });\r\n// //         });\r\n// //     }\r\n// //   }, []);\r\n// //   return (\r\n// //     <Box\r\n// //       sx={{\r\n// //         height: 400,\r\n// //         position: 'relative',\r\n// //       }}\r\n// //     >\r\n// //       <ReactMapGL\r\n// //         ref={mapRef}\r\n// //         mapboxAccessToken='pk.eyJ1Ijoic2FtYXJ0aDIxMSIsImEiOiJjbHo0bHd3OTcyYmM4MmpwdnpjNWJ5d2V0In0.BY16xp_jFGDvcHDcE_Ub6A'\r\n// //         initialViewState={{\r\n// //           longitude: lng,\r\n// //           latitude: lat,\r\n// //           zoom: 8,\r\n// //         }}\r\n// //         mapStyle=\"mapbox://styles/mapbox/streets-v11\"\r\n// //       >\r\n// //         <Marker\r\n// //           latitude={lat}\r\n// //           longitude={lng}\r\n// //           draggable\r\n// //           onDragEnd={(e) =>\r\n// //             dispatch({\r\n// //               type: 'UPDATE_LOCATION',\r\n// //               payload: { lng: e.lngLat.lng, lat: e.lngLat.lat },\r\n// //             })\r\n// //           }\r\n// //         />\r\n// //         <NavigationControl position=\"bottom-right\" />\r\n// //         <GeolocateControl\r\n// //           position=\"top-left\"\r\n// //           trackUserLocation\r\n// //           onGeolocate={(e) =>\r\n// //             dispatch({\r\n// //               type: 'UPDATE_LOCATION',\r\n// //               payload: { lng: e.coords.longitude, lat: e.coords.latitude },\r\n// //             })\r\n// //           }\r\n// //         />\r\n// //         <Geocoder />\r\n// //       </ReactMapGL>\r\n// //     </Box>\r\n// //   );\r\n// // };\r\n\r\n// // export default AddLocation;\r\n// import { Box } from '@mui/material';\r\n// import {\r\n//   GeolocateControl,\r\n//   Marker,\r\n//   NavigationControl,\r\n// } from 'react-map-gl';\r\n// import ReactMapGL from 'react-map-gl';\r\n// import { useValue } from '../../../context/ContextProvider';\r\n// import 'mapbox-gl/dist/mapbox-gl.css';\r\n// import { useEffect, useRef } from 'react';\r\n// import Geocoder from './Geocoder';\r\n\r\n// const AddLocation = () => {\r\n//   const MAP_TOKEN='pk.eyJ1Ijoic2FtYXJ0aDIxMSIsImEiOiJjbHo0cGo1aWwwbGxpMmpxMWVoOTF6NGh3In0.5WY-D1SCAOcqL6xaJA9w0g';\r\n//   const {\r\n//     state: {\r\n//       location: { lng, lat },\r\n//     },\r\n//     dispatch,\r\n//   } = useValue();\r\n//   const mapRef = useRef();\r\n\r\n//   useEffect(() => {\r\n//     if (!lng && !lat) {\r\n//       fetch('https://ipapi.co/json')\r\n//         .then((response) => response.json())\r\n//         .then((data) => {\r\n//           mapRef.current.flyTo({\r\n//             center: [data.longitude, data.latitude],\r\n//           });\r\n//           dispatch({\r\n//             type: 'UPDATE_LOCATION',\r\n//             payload: { lng: data.longitude, lat: data.latitude },\r\n//           });\r\n//         });\r\n//     }\r\n//   }, [lng, lat, dispatch]);\r\n\r\n//   return (\r\n//     <Box\r\n//       sx={{\r\n//         height: 400,\r\n//         position: 'relative',\r\n//       }}\r\n//     >\r\n//       <ReactMapGL\r\n//         ref={mapRef}\r\n//         mapboxAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\r\n//         initialViewState={{\r\n//           longitude: lng,\r\n//           latitude: lat,\r\n//           zoom: 8,\r\n//         }}\r\n//         mapStyle=\"mapbox://styles/mapbox/streets-v12\"\r\n//       >\r\n//         <Marker\r\n//           latitude={lat}\r\n//           longitude={lng}\r\n//           draggable\r\n//           onDragEnd={(e) =>\r\n//             dispatch({\r\n//               type: 'UPDATE_LOCATION',\r\n//               payload: { lng: e.lngLat.lng, lat: e.lngLat.lat },\r\n//             })\r\n//           }\r\n//         />\r\n//         {/* <GeolocateControl\r\n//           position=\"top-left\"\r\n//           trackUserLocation\r\n//           onGeolocate={(e) =>\r\n//             dispatch({\r\n//               type: 'UPDATE_LOCATION',\r\n//               payload: { lng: e.coords.longitude, lat: e.coords.latitude },\r\n//             })\r\n//           } */}\r\n//         {/* /> */}\r\n//         <Geocoder mapRef={mapRef} />\r\n//       </ReactMapGL>\r\n//     </Box>\r\n//   );\r\n// };\r\n\r\n// export default AddLocation;\r\n"],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}