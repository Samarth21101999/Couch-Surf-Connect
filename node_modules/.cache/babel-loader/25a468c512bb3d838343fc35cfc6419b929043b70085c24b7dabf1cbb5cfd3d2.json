{"ast":null,"code":"var _jsxFileName = \"D:\\\\MERN Stack Project\\\\CouchSurfConnect\\\\client\\\\src\\\\components\\\\addRoom\\\\addLocation\\\\AddLocation.js\",\n  _s = $RefreshSig$();\n// // import React, { useEffect } from 'react'\n// // import ReactMapGL,{Marker} from 'react-map-gl';\n// // import {Box} from '@mui/material';\n// // import { useValue } from '../../../context/ContextProvider';\n// // import 'mapbox-gl/dist/mapbox-gl.css';\n\n// // const AddLocation = () => {\n// //   const {state:{location:{lng,lat}},dispatch}=useValue();\n// //   console.log('Longitude:', lng, 'Latitude:', lat); \n// //   useEffect(()=>{\n// //     navigator.geolocation.getCurrentPosition((position)=>{\n// //       dispatch({type:'UPDATE_LOCATION',payload:{lng:position.coords.longitude,lat:position.coords.latitude}})\n// //     })\n// //   }\n// //   ,[dispatch])\n// //   return (\n// //     <Box sx={{\n// //       height:400,\n// //       position:'relative',\n// //     }}>\n// //       <ReactMapGL mapboxAccessToken={'pk.eyJ1Ijoic2FtYXJ0aDIxMSIsImEiOiJjbHo0bHd3OTcyYmM4MmpwdnpjNWJ5d2V0In0.BY16xp_jFGDvcHDcE_Ub6A'}\n// //       initialViewState={{\n// //         longitude:lng,\n// //         latitude:lat,\n// //         zoom:8}}\n// //         mapStyle='mapbox://styles/mapbox/streets-v11'>\n// //           {/* <Marker \n// //           latitude={lat}\n// //           longitude={lng}\n// //           draggable\n// //           onDragEnd={(e)=>dispatch({type:'UPDATE_LOCATION',payload:{lng:e.lngLat.lng,lat:e.lngLat.lat}})}\n// //           /> */}\n// //         </ReactMapGL>\n// //     </Box>\n// //   )\n// // }\n\n// // export default AddLocation\n// import { Box } from '@mui/material';\n// import ReactMapGL, {\n//   GeolocateControl,\n//   Marker,\n//   NavigationControl,\n// } from 'react-map-gl';\n// import { useValue } from '../../../context/ContextProvider';\n// import 'mapbox-gl/dist/mapbox-gl.css';\n// import { useEffect, useRef } from 'react';\n// import Geocoder from './Geocoder';\n\n// const AddLocation = () => {\n//   const {\n//     state: {\n//       location: { lng, lat },\n//     },\n//     dispatch,\n//   } = useValue();\n//   const mapRef = useRef();\n\n//   useEffect(() => {\n//     if (!lng && !lat) {\n//       fetch('https://ipapi.co/json')\n//         .then((response) => {\n//           return response.json();\n//         })\n//         .then((data) => {\n//           mapRef.current.flyTo({\n//             center: [data.longitude, data.latitude],\n//           });\n//           dispatch({\n//             type: 'UPDATE_LOCATION',\n//             payload: { lng: data.longitude, lat: data.latitude },\n//           });\n//         });\n//     }\n//   }, []);\n//   return (\n//     <Box\n//       sx={{\n//         height: 400,\n//         position: 'relative',\n//       }}\n//     >\n//       <ReactMapGL\n//         ref={mapRef}\n//         mapboxAccessToken='pk.eyJ1Ijoic2FtYXJ0aDIxMSIsImEiOiJjbHo0bHd3OTcyYmM4MmpwdnpjNWJ5d2V0In0.BY16xp_jFGDvcHDcE_Ub6A'\n//         initialViewState={{\n//           longitude: lng,\n//           latitude: lat,\n//           zoom: 8,\n//         }}\n//         mapStyle=\"mapbox://styles/mapbox/streets-v11\"\n//       >\n//         <Marker\n//           latitude={lat}\n//           longitude={lng}\n//           draggable\n//           onDragEnd={(e) =>\n//             dispatch({\n//               type: 'UPDATE_LOCATION',\n//               payload: { lng: e.lngLat.lng, lat: e.lngLat.lat },\n//             })\n//           }\n//         />\n//         <NavigationControl position=\"bottom-right\" />\n//         <GeolocateControl\n//           position=\"top-left\"\n//           trackUserLocation\n//           onGeolocate={(e) =>\n//             dispatch({\n//               type: 'UPDATE_LOCATION',\n//               payload: { lng: e.coords.longitude, lat: e.coords.latitude },\n//             })\n//           }\n//         />\n//         <Geocoder />\n//       </ReactMapGL>\n//     </Box>\n//   );\n// };\n\n// export default AddLocation;\nimport { Box } from '@mui/material';\nimport { GeolocateControl, Marker, NavigationControl } from 'react-map-gl';\nimport ReactMapGL from 'react-map-gl';\nimport { useValue } from '../../../context/ContextProvider';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { useEffect, useRef } from 'react';\nimport Geocoder from './Geocoder';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddLocation = () => {\n  _s();\n  const {\n    state: {\n      location: {\n        lng,\n        lat\n      }\n    },\n    dispatch\n  } = useValue();\n  const mapRef = useRef();\n  useEffect(() => {\n    if (!lng && !lat) {\n      fetch('https://ipapi.co/json').then(response => response.json()).then(data => {\n        mapRef.current.flyTo({\n          center: [data.longitude, data.latitude]\n        });\n        dispatch({\n          type: 'UPDATE_LOCATION',\n          payload: {\n            lng: data.longitude,\n            lat: data.latitude\n          }\n        });\n      });\n    }\n  }, [lng, lat, dispatch]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: 400,\n      position: 'relative'\n    },\n    children: /*#__PURE__*/_jsxDEV(ReactMapGL, {\n      ref: mapRef,\n      initialViewState: {\n        longitude: lng,\n        latitude: lat,\n        zoom: 8\n      },\n      mapStyle: \"mapbox://styles/mapbox/streets-v12\",\n      children: [/*#__PURE__*/_jsxDEV(Marker, {\n        latitude: lat,\n        longitude: lng,\n        draggable: true,\n        onDragEnd: e => dispatch({\n          type: 'UPDATE_LOCATION',\n          payload: {\n            lng: e.lngLat.lng,\n            lat: e.lngLat.lat\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Geocoder, {\n        mapRef: mapRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n_s(AddLocation, \"LQCd7rXdHqhWlB2Qzg7cIHj2F7U=\", false, function () {\n  return [useValue];\n});\n_c = AddLocation;\nexport default AddLocation;\nvar _c;\n$RefreshReg$(_c, \"AddLocation\");","map":{"version":3,"names":["Box","GeolocateControl","Marker","NavigationControl","ReactMapGL","useValue","useEffect","useRef","Geocoder","jsxDEV","_jsxDEV","AddLocation","_s","state","location","lng","lat","dispatch","mapRef","fetch","then","response","json","data","current","flyTo","center","longitude","latitude","type","payload","sx","height","position","children","ref","initialViewState","zoom","mapStyle","draggable","onDragEnd","e","lngLat","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/MERN Stack Project/CouchSurfConnect/client/src/components/addRoom/addLocation/AddLocation.js"],"sourcesContent":["// // import React, { useEffect } from 'react'\r\n// // import ReactMapGL,{Marker} from 'react-map-gl';\r\n// // import {Box} from '@mui/material';\r\n// // import { useValue } from '../../../context/ContextProvider';\r\n// // import 'mapbox-gl/dist/mapbox-gl.css';\r\n\r\n// // const AddLocation = () => {\r\n// //   const {state:{location:{lng,lat}},dispatch}=useValue();\r\n// //   console.log('Longitude:', lng, 'Latitude:', lat); \r\n// //   useEffect(()=>{\r\n// //     navigator.geolocation.getCurrentPosition((position)=>{\r\n// //       dispatch({type:'UPDATE_LOCATION',payload:{lng:position.coords.longitude,lat:position.coords.latitude}})\r\n// //     })\r\n// //   }\r\n// //   ,[dispatch])\r\n// //   return (\r\n// //     <Box sx={{\r\n// //       height:400,\r\n// //       position:'relative',\r\n// //     }}>\r\n// //       <ReactMapGL mapboxAccessToken={'pk.eyJ1Ijoic2FtYXJ0aDIxMSIsImEiOiJjbHo0bHd3OTcyYmM4MmpwdnpjNWJ5d2V0In0.BY16xp_jFGDvcHDcE_Ub6A'}\r\n// //       initialViewState={{\r\n// //         longitude:lng,\r\n// //         latitude:lat,\r\n// //         zoom:8}}\r\n// //         mapStyle='mapbox://styles/mapbox/streets-v11'>\r\n// //           {/* <Marker \r\n// //           latitude={lat}\r\n// //           longitude={lng}\r\n// //           draggable\r\n// //           onDragEnd={(e)=>dispatch({type:'UPDATE_LOCATION',payload:{lng:e.lngLat.lng,lat:e.lngLat.lat}})}\r\n// //           /> */}\r\n// //         </ReactMapGL>\r\n// //     </Box>\r\n// //   )\r\n// // }\r\n\r\n// // export default AddLocation\r\n// import { Box } from '@mui/material';\r\n// import ReactMapGL, {\r\n//   GeolocateControl,\r\n//   Marker,\r\n//   NavigationControl,\r\n// } from 'react-map-gl';\r\n// import { useValue } from '../../../context/ContextProvider';\r\n// import 'mapbox-gl/dist/mapbox-gl.css';\r\n// import { useEffect, useRef } from 'react';\r\n// import Geocoder from './Geocoder';\r\n\r\n// const AddLocation = () => {\r\n//   const {\r\n//     state: {\r\n//       location: { lng, lat },\r\n//     },\r\n//     dispatch,\r\n//   } = useValue();\r\n//   const mapRef = useRef();\r\n\r\n//   useEffect(() => {\r\n//     if (!lng && !lat) {\r\n//       fetch('https://ipapi.co/json')\r\n//         .then((response) => {\r\n//           return response.json();\r\n//         })\r\n//         .then((data) => {\r\n//           mapRef.current.flyTo({\r\n//             center: [data.longitude, data.latitude],\r\n//           });\r\n//           dispatch({\r\n//             type: 'UPDATE_LOCATION',\r\n//             payload: { lng: data.longitude, lat: data.latitude },\r\n//           });\r\n//         });\r\n//     }\r\n//   }, []);\r\n//   return (\r\n//     <Box\r\n//       sx={{\r\n//         height: 400,\r\n//         position: 'relative',\r\n//       }}\r\n//     >\r\n//       <ReactMapGL\r\n//         ref={mapRef}\r\n//         mapboxAccessToken='pk.eyJ1Ijoic2FtYXJ0aDIxMSIsImEiOiJjbHo0bHd3OTcyYmM4MmpwdnpjNWJ5d2V0In0.BY16xp_jFGDvcHDcE_Ub6A'\r\n//         initialViewState={{\r\n//           longitude: lng,\r\n//           latitude: lat,\r\n//           zoom: 8,\r\n//         }}\r\n//         mapStyle=\"mapbox://styles/mapbox/streets-v11\"\r\n//       >\r\n//         <Marker\r\n//           latitude={lat}\r\n//           longitude={lng}\r\n//           draggable\r\n//           onDragEnd={(e) =>\r\n//             dispatch({\r\n//               type: 'UPDATE_LOCATION',\r\n//               payload: { lng: e.lngLat.lng, lat: e.lngLat.lat },\r\n//             })\r\n//           }\r\n//         />\r\n//         <NavigationControl position=\"bottom-right\" />\r\n//         <GeolocateControl\r\n//           position=\"top-left\"\r\n//           trackUserLocation\r\n//           onGeolocate={(e) =>\r\n//             dispatch({\r\n//               type: 'UPDATE_LOCATION',\r\n//               payload: { lng: e.coords.longitude, lat: e.coords.latitude },\r\n//             })\r\n//           }\r\n//         />\r\n//         <Geocoder />\r\n//       </ReactMapGL>\r\n//     </Box>\r\n//   );\r\n// };\r\n\r\n// export default AddLocation;\r\nimport { Box } from '@mui/material';\r\nimport {\r\n  GeolocateControl,\r\n  Marker,\r\n  NavigationControl,\r\n} from 'react-map-gl';\r\nimport ReactMapGL from 'react-map-gl';\r\nimport { useValue } from '../../../context/ContextProvider';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport { useEffect, useRef } from 'react';\r\nimport Geocoder from './Geocoder';\r\n\r\nconst AddLocation = () => {\r\n  const {\r\n    state: {\r\n      location: { lng, lat },\r\n    },\r\n    dispatch,\r\n  } = useValue();\r\n  const mapRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!lng && !lat) {\r\n      fetch('https://ipapi.co/json')\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          mapRef.current.flyTo({\r\n            center: [data.longitude, data.latitude],\r\n          });\r\n          dispatch({\r\n            type: 'UPDATE_LOCATION',\r\n            payload: { lng: data.longitude, lat: data.latitude },\r\n          });\r\n        });\r\n    }\r\n  }, [lng, lat, dispatch]);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        height: 400,\r\n        position: 'relative',\r\n      }}\r\n    >\r\n      <ReactMapGL\r\n        ref={mapRef}\r\n        initialViewState={{\r\n          longitude: lng,\r\n          latitude: lat,\r\n          zoom: 8,\r\n        }}\r\n        mapStyle=\"mapbox://styles/mapbox/streets-v12\"\r\n      >\r\n        <Marker\r\n          latitude={lat}\r\n          longitude={lng}\r\n          draggable\r\n          onDragEnd={(e) =>\r\n            dispatch({\r\n              type: 'UPDATE_LOCATION',\r\n              payload: { lng: e.lngLat.lng, lat: e.lngLat.lat },\r\n            })\r\n          }\r\n        />\r\n        {/* <GeolocateControl\r\n          position=\"top-left\"\r\n          trackUserLocation\r\n          onGeolocate={(e) =>\r\n            dispatch({\r\n              type: 'UPDATE_LOCATION',\r\n              payload: { lng: e.coords.longitude, lat: e.coords.latitude },\r\n            })\r\n          } */}\r\n        {/* /> */}\r\n        <Geocoder mapRef={mapRef} />\r\n      </ReactMapGL>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AddLocation;\r\n"],"mappingseAAe;AACnC,SACEC,gBAAgB,EAChBC,MAAM,EACNC,iBAAiB,QACZ,cAAc;AACrB,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,QAAQ,QAAQ,kCAAkC;AAC3D,OAAO,8BAA8B;AACrC,SAASC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM;IACJC,KAAK,EAAE;MACLC,QAAQ,EAAE;QAAEC,GAAG;QAAEC;MAAI;IACvB,CAAC;IACDC;EACF,CAAC,GAAGZ,QAAQ,CAAC,CAAC;EACd,MAAMa,MAAM,GAAGX,MAAM,CAAC,CAAC;EAEvBD,SAAS,CAAC,MAAM;IACd,IAAI,CAACS,GAAG,IAAI,CAACC,GAAG,EAAE;MAChBG,KAAK,CAAC,uBAAuB,CAAC,CAC3BC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;QACdL,MAAM,CAACM,OAAO,CAACC,KAAK,CAAC;UACnBC,MAAM,EAAE,CAACH,IAAI,CAACI,SAAS,EAAEJ,IAAI,CAACK,QAAQ;QACxC,CAAC,CAAC;QACFX,QAAQ,CAAC;UACPY,IAAI,EAAE,iBAAiB;UACvBC,OAAO,EAAE;YAAEf,GAAG,EAAEQ,IAAI,CAACI,SAAS;YAAEX,GAAG,EAAEO,IAAI,CAACK;UAAS;QACrD,CAAC,CAAC;MACJ,CAAC,CAAC;IACN;EACF,CAAC,EAAE,CAACb,GAAG,EAAEC,GAAG,EAAEC,QAAQ,CAAC,CAAC;EAExB,oBACEP,OAAA,CAACV,GAAG;IACF+B,EAAE,EAAE;MACFC,MAAM,EAAE,GAAG;MACXC,QAAQ,EAAE;IACZ,CAAE;IAAAC,QAAA,eAEFxB,OAAA,CAACN,UAAU;MACT+B,GAAG,EAAEjB,MAAO;MACZkB,gBAAgB,EAAE;QAChBT,SAAS,EAAEZ,GAAG;QACda,QAAQ,EAAEZ,GAAG;QACbqB,IAAI,EAAE;MACR,CAAE;MACFC,QAAQ,EAAC,oCAAoC;MAAAJ,QAAA,gBAE7CxB,OAAA,CAACR,MAAM;QACL0B,QAAQ,EAAEZ,GAAI;QACdW,SAAS,EAAEZ,GAAI;QACfwB,SAAS;QACTC,SAAS,EAAGC,CAAC,IACXxB,QAAQ,CAAC;UACPY,IAAI,EAAE,iBAAiB;UACvBC,OAAO,EAAE;YAAEf,GAAG,EAAE0B,CAAC,CAACC,MAAM,CAAC3B,GAAG;YAAEC,GAAG,EAAEyB,CAAC,CAACC,MAAM,CAAC1B;UAAI;QAClD,CAAC;MACF;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eAWFpC,OAAA,CAACF,QAAQ;QAACU,MAAM,EAAEA;MAAO;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEV,CAAC;AAAClC,EAAA,CAlEID,WAAW;EAAA,QAMXN,QAAQ;AAAA;AAAA0C,EAAA,GANRpC,WAAW;AAoEjB,eAAeA,WAAW;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}